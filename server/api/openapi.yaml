openapi: 3.0.2
info:
  contact:
    email: rlee@163.com
    name: Ryan Li
  description: 统一用户管理系统 API
  license:
    name: MIT
    url: https://mit-license.org/
  title: 统一用户管理系统 API
  version: 0.9.0
servers:
  - url: http://localhost:3000/ums
  - url: http://{host}:{port}/{contextPath}
    variables:
      host:
        default: localhost
      port:
        default: "3000"
      contextPath:
        default: ums
paths:
  /login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            example:
              username: xiawei
              password: "123"
            schema:
              $ref: "#/components/schemas/LoginDto"
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                登录成功:
                  value:
                    code: 20000
                    data:
                      token: user-define-token
                登录失败:
                  value:
                    code: 60204
                    message: 不正确的用户名或密码
              schema:
                $ref: "#/components/schemas/LoginResDto"
          description: OK
      summary: 用户登录
      tags:
        - User
      x-eov-operation-handler: controllers/UserController
  /info:
    get:
      description: |
        通过 token 获取用户信息，必须先登录成功。
      operationId: getInfo
      parameters:
        - description: 用户 token
          explode: true
          in: query
          name: token
          required: true
          schema:
            example: user-define-token
            type: string
          style: form
      responses:
        "200":
          content:
            application/json:
              example:
                code: 20000
                data:
                  username: xiawei
                  name: 夏伟
                  roles:
                    - 组长
                    - 包干修复初审
                  avatar: /avatars/xiawei.png
              schema:
                $ref: "#/components/schemas/InfoResDto"
          description: OK
      summary: 获取用户信息
      tags:
        - User
      x-eov-operation-handler: controllers/UserController
  /logout:
    post:
      operationId: logout
      parameters:
        - description: |
            通过 `header` 中的 `X-Token` 来传递 token
          explode: false
          in: header
          name: x-token
          required: true
          schema:
            example: user-define-token
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                code: 20000
                data: success
              schema:
                $ref: "#/components/schemas/LogoutResDto"
          description: OK
      summary: 用户登出
      tags:
        - User
      x-eov-operation-handler: controllers/UserController
  /role/{role}:
    get:
      description: 通过 role 来获取该角色的所有成员列表
      operationId: getRoleMember
      parameters:
        - description: 角色名称
          explode: false
          in: path
          name: role
          required: true
          schema:
            example: 组长
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                code: 20000
                data:
                  role: 组长
                  members:
                    - username: fengming
                      name: 冯明
                    - username: zhangyang
                      name: 张洋
                    - username: lijie
                      name: 李捷
              schema:
                $ref: "#/components/schemas/RoleMemberResDto"
          description: OK
      summary: 获取用户组中的所有成员列表
      tags:
        - User
      x-eov-operation-handler: controllers/UserController
components:
  schemas:
    ResponseCode:
      properties:
        code:
          description: |
            `20000`: 操作成功 <br> `60204`: 不正确的用户名或密码 <br> `50008`: 无效的 token <br> `50012`: 已在其它客户端登录 <br> `50014`: 过期的 token
          type: integer
      type: object
    LoginDto:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - password
        - username
      type: object
    LoginResDto:
      allOf:
        - $ref: "#/components/schemas/ResponseCode"
        - $ref: "#/components/schemas/LoginResDto_allOf"
    InfoResDto:
      allOf:
        - $ref: "#/components/schemas/ResponseCode"
        - $ref: "#/components/schemas/InfoResDto_allOf"
    LogoutResDto:
      allOf:
        - $ref: "#/components/schemas/ResponseCode"
        - $ref: "#/components/schemas/LogoutResDto_allOf"
    RoleMemberResDto:
      allOf:
        - $ref: "#/components/schemas/ResponseCode"
        - $ref: "#/components/schemas/RoleMemberResDto_allOf"
    LoginResDto_allOf_data:
      properties:
        token:
          type: string
    LoginResDto_allOf:
      properties:
        data:
          $ref: "#/components/schemas/LoginResDto_allOf_data"
        message:
          description: 登录错误的原因
          type: string
    InfoResDto_allOf_data:
      properties:
        username:
          description: 用户名
          type: string
        name:
          description: 用户的真实姓名
          type: string
        roles:
          items:
            description: 用户所属的角色列表
            type: string
          type: array
        avatar:
          description: 用户头像的 url 或 Base64 编码图像
          type: string
    InfoResDto_allOf:
      properties:
        data:
          $ref: "#/components/schemas/InfoResDto_allOf_data"
    LogoutResDto_allOf:
      properties:
        data:
          description: 总是 "success"
          type: string
    RoleMemberResDto_allOf_data_members:
      properties:
        username:
          type: string
        name:
          type: string
    RoleMemberResDto_allOf_data:
      properties:
        role:
          type: string
        members:
          items:
            $ref: "#/components/schemas/RoleMemberResDto_allOf_data_members"
          type: array
    RoleMemberResDto_allOf:
      properties:
        data:
          $ref: "#/components/schemas/RoleMemberResDto_allOf_data"
